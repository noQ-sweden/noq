# Deployment pipeline for noQ web application
name: noQ - Deployment

on:
  push:
    branches: ["main"]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  # Verify build of frontend
  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Build user-client
        working-directory: frontend/user-client
        run: |
          npm install
          npm run build

      - name: Build admin-client
        working-directory: frontend/admin-client
        run: |
          npm install
          npm run build

      - name: Build host-client
        working-directory: frontend/host-client
        run: |
          npm install
          npm run build

  # Verify build of backend
  build-backend:
    name: Build backend
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Build backend
        working-directory: noq-backend/
        run: mvn -B package --file pom.xml -e

  # Run deployment to dev environment if the two previous build steps are successful
  dev-deployment:
    name: Deploy to Development
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    environment: Development

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # Authenticate with Azure Cloud
      - name: "OIDC Login to Azure"
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # Create formatted timestamp to use as deployment name
      - name: Store current timestamp
        id: date
        run: echo "ts=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      # Provision base infrastructure resources
      - name: Provision base infrastructure
        id: arm
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTIONID }}
          scope: subscription
          region: swedencentral
          template: ./infrastructure/noq-infrastructure-main.bicep
          deploymentName: "noq_main_${{ steps.date.outputs.ts }}"
          parameters: >
            envShortName=${{ vars.ENV_SHORTNAME }}
            azureLocationName="Sweden Central"
            postgresUsername=${{ secrets.POSTGRES_USERNAME }}
            postgresPassword=${{ secrets.POSTGRES_PASSWORD }}
          failOnStdErr: false

      - shell: bash
        name: 'Sign in to Azure Container Registry'
        env:
          CONTAINER_REGISTRY: ${{ steps.arm.outputs.registryLoginServer }}
        run: |
          TOKEN=$(az acr login --name $CONTAINER_REGISTRY --expose-token --output tsv --query accessToken)
          docker login $CONTAINER_REGISTRY --username 00000000-0000-0000-0000-000000000000 --password-stdin <<< $TOKEN

      - name: "Build and push user-client image"
        working-directory: frontend/user-client
        run: |
          docker build . -t ${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-user-client:${{ github.sha }}
          docker push ${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-user-client:${{ github.sha }}

      - name: "Build and push admin-client image"
        working-directory: frontend/admin-client
        run: |
          docker build . -t ${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-admin-client:${{ github.sha }}
          docker push ${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-admin-client:${{ github.sha }}

      - name: "Build and push host-client image"
        working-directory: frontend/host-client
        run: |
          docker build . -t ${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-host-client:${{ github.sha }}
          docker push ${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-host-client:${{ github.sha }}

      - name: "Build and push backend image"
        working-directory: noq-backend
        run: |
          docker build . -t ${{ steps.arm.outputs.registryLoginServer }}/backend/noq-backend:${{ github.sha }}
          docker push ${{ steps.arm.outputs.registryLoginServer }}/backend/noq-backend:${{ github.sha }}

      # TODO: Grant managed identities access to pull from container registry,
      # then remove this step
      - name: Get container registry credentials
        id: keyVaultSecrets
        run: |
          registryUsername=$(az keyvault secret show --name ${{ steps.arm.outputs.registryUsernameSecretName }} --vault-name ${{ steps.arm.outputs.keyVaultName }} --query value)
          echo "::add-mask::$registryUsername"
          echo registryUsername=$registryUsername >> $GITHUB_ENV
          registryPassword=$(az keyvault secret show --name ${{ steps.arm.outputs.registryPwdSecretName }} --vault-name ${{ steps.arm.outputs.keyVaultName }} --query value)
          echo "::add-mask::$registryPassword"
          echo registryPassword=$registryPassword >> $GITHUB_ENV

      # Provision container app for backend
      - name: Provision backend container app
        id: backend
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTIONID }}
          scope: subscription
          region: swedencentral
          template: ./infrastructure/noq-backend-app.bicep
          deploymentName: "noq_be_${{ steps.date.outputs.ts }}"
          parameters: >
            registryUsername=${{ env.registryUsername }}
            registry=${{ steps.arm.outputs.registryLoginServer }}
            envShortName=${{ vars.ENV_SHORTNAME }}
            appName="noq-backend"
            containerEnvironment=${{ steps.arm.outputs.containerEnvironmentName }}
            containerImage=${{ steps.arm.outputs.registryLoginServer }}/backend/noq-backend:${{ github.sha }}
            targetPort=8080
            psqlServerName="${{ steps.arm.outputs.psqlServerName}}"
            psqlUsernameUri="${{ steps.arm.outputs.postgresAdminUsernameUri}}"
            psqlPasswordUri="${{ steps.arm.outputs.postgresAdminPasswordUri}}"
            registryPasswordUri="${{ steps.arm.outputs.containerRegistryPasswordUri}}"
            backendAppIdentityName="${{ steps.arm.outputs.backendAppIdentityName }}"
          failOnStdErr: false

      # Provision container app for user-client
      - name: Provision user-client container app
        id: user_client
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTIONID }}
          scope: subscription
          region: swedencentral
          template: ./infrastructure/noq-frontend-client.bicep
          deploymentName: "noq_user_client_${{ steps.date.outputs.ts }}"
          parameters: >
            registryUsername=${{ env.registryUsername }}
            registry=${{ steps.arm.outputs.registryLoginServer }}
            envShortName=${{ vars.ENV_SHORTNAME }}
            appName="noq-user-client"
            containerEnvironment=${{ steps.arm.outputs.containerEnvironmentName }}
            containerImage=${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-user-client:${{ github.sha }}
            targetPort=3000
            backendUrl="${{ steps.backend.outputs.containerFqdn}}"
            registryPasswordUri="${{ steps.arm.outputs.containerRegistryPasswordUri}}"
            appManagedIdentityName="${{ steps.arm.outputs.frontendAppIdentityName }}"
          failOnStdErr: false

      # Provision container app for admin-client
      - name: Provision admin-client container app
        id: admin_client
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTIONID }}
          scope: subscription
          region: swedencentral
          template: ./infrastructure/noq-frontend-client.bicep
          deploymentName: "noq_admin_client_${{ steps.date.outputs.ts }}"
          parameters: >
            registryUsername=${{ env.registryUsername }}
            registry=${{ steps.arm.outputs.registryLoginServer }}
            envShortName=${{ vars.ENV_SHORTNAME }}
            appName="noq-admin-client"
            containerEnvironment=${{ steps.arm.outputs.containerEnvironmentName }}
            containerImage=${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-admin-client:${{ github.sha }}
            targetPort=3000
            backendUrl="${{ steps.backend.outputs.containerFqdn}}"
            registryPasswordUri="${{ steps.arm.outputs.containerRegistryPasswordUri}}"
            appManagedIdentityName="${{ steps.arm.outputs.frontendAppIdentityName }}"
          failOnStdErr: false

      # Provision container app for host-client
      - name: Provision host-client container app
        id: host_client
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ vars.AZURE_SUBSCRIPTIONID }}
          scope: subscription
          region: swedencentral
          template: ./infrastructure/noq-frontend-client.bicep
          deploymentName: "noq_host_client_${{ steps.date.outputs.ts }}"
          parameters: >
            registryUsername=${{ env.registryUsername }}
            registry=${{ steps.arm.outputs.registryLoginServer }}
            envShortName=${{ vars.ENV_SHORTNAME }}
            appName="noq-host-client"
            containerEnvironment=${{ steps.arm.outputs.containerEnvironmentName }}
            containerImage=${{ steps.arm.outputs.registryLoginServer }}/frontend/noq-host-client:${{ github.sha }}
            targetPort=3000
            backendUrl="${{ steps.backend.outputs.containerFqdn}}"
            registryPasswordUri="${{ steps.arm.outputs.containerRegistryPasswordUri}}"
            appManagedIdentityName="${{ steps.arm.outputs.frontendAppIdentityName }}"
          failOnStdErr: false
